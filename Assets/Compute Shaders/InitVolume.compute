#pragma kernel CSMain

uniform int _VolumeSize;
globallycoherent RWStructuredBuffer<float4> _VoxelBuffer;
globallycoherent RWStructuredBuffer<uint> _VoxelFlagBuffer;


uint float2Touint(float2 f2Value)
{
	return (f32tof16(f2Value.x) + (f32tof16(f2Value.y) << 16));
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x + id.y * _VolumeSize + id.z * _VolumeSize * _VolumeSize; 
	_VoxelBuffer[idx] = float4(-10.0f,1,0,0);    
//	_VoxelBuffer[idx] = float4(0,0,0,0);   
	_VoxelFlagBuffer[idx]=1; 
}
